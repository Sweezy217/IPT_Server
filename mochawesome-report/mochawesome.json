{
  "stats": {
    "suites": 7,
    "tests": 21,
    "passes": 17,
    "pending": 0,
    "failures": 4,
    "start": "2024-11-10T20:33:49.935Z",
    "end": "2024-11-10T20:34:06.995Z",
    "duration": 17060,
    "testsRegistered": 21,
    "passPercent": 80.95238095238095,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "17d61fc9-fdb4-46ed-97d9-1b3a5465cd56",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "065e1b83-509e-47e8-bb91-d5fda4fce8d1",
          "title": "GET /userWorkSpaces",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 400 if email query parameter is missing",
              "fullTitle": "GET /userWorkSpaces should return 400 if email query parameter is missing",
              "timedOut": false,
              "duration": 604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces`);\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data.message).to.equal(\n    \"Email query parameter is required\"\n  );\n}",
              "err": {},
              "uuid": "f3915497-3b80-44e4-a8a6-2affb465dce1",
              "parentUUID": "065e1b83-509e-47e8-bb91-d5fda4fce8d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and list of workspaces if email has associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 200 and list of workspaces if email has associated workspaces",
              "timedOut": false,
              "duration": 794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(\n  `${URL}/userWorkSpaces?email=siphomkhize217@gmail.com`\n);\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property(\"message\").that.is.an(\"array\");\nresponse.data.message.forEach((workspace) => {\n  expect(workspace).to.have.property(\"workspaceName\");\n});",
              "err": {},
              "uuid": "e45b37b0-269f-4579-a8c4-6643bf6ce151",
              "parentUUID": "065e1b83-509e-47e8-bb91-d5fda4fce8d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if email has no associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 404 if email has no associated workspaces",
              "timedOut": false,
              "duration": 770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces?email=no_workspace@example.com`);\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data.message).to.equal(\"No workspaces found\");\n}",
              "err": {},
              "uuid": "e4c1033c-f36a-4d91-9444-809ef922a509",
              "parentUUID": "065e1b83-509e-47e8-bb91-d5fda4fce8d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3915497-3b80-44e4-a8a6-2affb465dce1",
            "e45b37b0-269f-4579-a8c4-6643bf6ce151",
            "e4c1033c-f36a-4d91-9444-809ef922a509"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2168,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7379dc9d-91ce-43aa-8afe-9a74898d8204",
          "title": "GET /users",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of users successfully",
              "fullTitle": "GET /users should retrieve a list of users successfully",
              "timedOut": false,
              "duration": 770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get(`${URL}/users`);\n  expect(response.status).to.equal(200);\n  expect(response.data).to.be.an(\"array\");\n  expect(response.data.length).to.be.greaterThan(0);\n  response.data.forEach((user) => {\n    expect(user).to.have.property(\"firstName\");\n    expect(user).to.have.property(\"lastName\");\n    expect(user).to.have.property(\"email\");\n  });\n} catch (error) {\n  throw new Error(`Expected status 200 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "9c36ba58-cee1-4722-8202-c045b00d4c71",
              "parentUUID": "7379dc9d-91ce-43aa-8afe-9a74898d8204",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no users are found",
              "fullTitle": "GET /users should return 404 if no users are found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockResponse = {\n  status: 404,\n  data: { message: \"No Users Found.\" },\n};\n// Mock axios.get method\naxios.get = () => Promise.resolve(mockResponse);\ntry {\n  const response = await axios.get(`${URL}/users`);\n  expect(response.status).to.equal(404);\n  expect(response.data).to.have.property(\"message\", \"No Users Found.\");\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"No Users Found.\"\n  );\n}",
              "err": {},
              "uuid": "35115229-43da-46d2-8eef-172433134da6",
              "parentUUID": "7379dc9d-91ce-43aa-8afe-9a74898d8204",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 in case of a server error",
              "fullTitle": "GET /users should return 500 in case of a server error",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/users`);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:85:29)",
                "diff": null
              },
              "uuid": "cb00a72c-2984-4503-86f1-a94483bce7e3",
              "parentUUID": "7379dc9d-91ce-43aa-8afe-9a74898d8204",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c36ba58-cee1-4722-8202-c045b00d4c71",
            "35115229-43da-46d2-8eef-172433134da6"
          ],
          "failures": [
            "cb00a72c-2984-4503-86f1-a94483bce7e3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 770,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2da5852f-d90e-450f-ba58-b136a7265c9a",
          "title": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return tasks for the given email and workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return tasks for the given email and workspace",
              "timedOut": false,
              "duration": 1287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${URL}/getTasks`, validRequestData);\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\"message\");\n  expect(response.data.message).to.be.an(\"array\");\n  expect(response.data.message.length).to.be.greaterThan(0);\n} catch (error) {\n  throw new Error(`Expected status 200 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "8b1e8d3f-a1f0-4a03-9082-2a3ac51aaf1f",
              "parentUUID": "2da5852f-d90e-450f-ba58-b136a7265c9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no tasks are found for the given email and workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return 404 if no tasks are found for the given email and workspace",
              "timedOut": false,
              "duration": 790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidRequestData = {\n  email: \"non@gmail.com\",\n  workspaceName: \"Workspace\",\n};\ntry {\n  const response = await axios.post(`${URL}/getTasks`, invalidRequestData);\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data).to.have.property(\"message\", \"No tasks found\");\n} catch (error) {\n  console.log(\"err\", error);\n}",
              "err": {},
              "uuid": "508742ad-b5d3-473b-9c6c-26f16a53914d",
              "parentUUID": "2da5852f-d90e-450f-ba58-b136a7265c9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return 500 if there is a server error",
              "timedOut": false,
              "duration": 1278,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.post(`${URL}/getTasks`, validRequestData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:133:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e32a54d1-c860-4fee-b635-3c74da9dddf4",
              "parentUUID": "2da5852f-d90e-450f-ba58-b136a7265c9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b1e8d3f-a1f0-4a03-9082-2a3ac51aaf1f",
            "508742ad-b5d3-473b-9c6c-26f16a53914d"
          ],
          "failures": [
            "e32a54d1-c860-4fee-b635-3c74da9dddf4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3355,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "02c728f8-fc10-4b22-8994-d007da07f01b",
          "title": "This is a post req but because it is getting data it is under get.mjs. POST /getProject",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve projects for a specific workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getProject should retrieve projects for a specific workspace",
              "timedOut": false,
              "duration": 777,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  workspaceName: \"SamOrg\",\n};\ntry {\n  const response = await axios.post(`${URL}/getProject`, requestData);\n  \n  expect(response.status).to.equal(201);\n  expect(response.data.message).to.be.an(\"array\");\n  expect(response.data.message.length).to.be.greaterThan(0);\n  response.data.message.forEach((project) => {\n    expect(project).to.have.property(\"title\");\n    expect(project).to.have.property(\"workspaceName\");\n  });\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "1acfa0ce-c44f-46e8-8c89-642fc35c3510",
              "parentUUID": "02c728f8-fc10-4b22-8994-d007da07f01b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no projects are found for the workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getProject should return an empty array if no projects are found for the workspace",
              "timedOut": false,
              "duration": 784,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  workspaceName: \"Samorgs\",\n};\ntry {\n  const response = await axios.post(`${URL}/getProject`, requestData);\n  \n  expect(response.status).to.equal(201);\n  expect(response.data.message).to.be.an(\"array\").that.is.empty;\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "74901f57-607a-4d71-ae83-abe1b435285e",
              "parentUUID": "02c728f8-fc10-4b22-8994-d007da07f01b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if fetching projects fails",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getProject should return an error if fetching projects fails",
              "timedOut": false,
              "duration": 768,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  workspaceName: {},\n};\ntry {\n  await axios.post(`${URL}/getProject`, requestData);\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\"message\", \"Internal Server Error\");\n}",
              "err": {},
              "uuid": "1e833e0a-7f54-4280-8208-0d95edd14147",
              "parentUUID": "02c728f8-fc10-4b22-8994-d007da07f01b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1acfa0ce-c44f-46e8-8c89-642fc35c3510",
            "74901f57-607a-4d71-ae83-abe1b435285e",
            "1e833e0a-7f54-4280-8208-0d95edd14147"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2329,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9857f6ff-801b-4fed-ab28-d4ad96963f34",
          "title": "POST /createWorkspace",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new workspace and user successfully",
              "fullTitle": "POST /createWorkspace should create a new workspace and user successfully",
              "timedOut": false,
              "duration": 1000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(\n    `${BASE_URL}/createWorkspace`,\n    validWorkspaceData\n  );\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"Workspace and User successfully created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n  expect(response.data).to.have.property(\"workspaceId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {
                "message": "Error: Expected status 201 but got 400",
                "estack": "Error: Expected status 201 but got 400\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:30:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c5cf5cc1-0fee-4a5c-ac3b-b291d3f7b96a",
              "parentUUID": "9857f6ff-801b-4fed-ab28-d4ad96963f34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the email already owns a workspace",
              "fullTitle": "POST /createWorkspace should fail if the email already owns a workspace",
              "timedOut": false,
              "duration": 999,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  // Assuming the email is already in use, send a request with the same owner_email\n  await axios.post(`${BASE_URL}/createWorkspace`, validWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Email already Owns a WorkSpace!!\"\n  );\n}",
              "err": {},
              "uuid": "fb4d99ae-86f9-48cf-b2f1-bfa51a446481",
              "parentUUID": "9857f6ff-801b-4fed-ab28-d4ad96963f34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the workspace name is already taken",
              "fullTitle": "POST /createWorkspace should fail if the workspace name is already taken",
              "timedOut": false,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateWorkspaceData = {\n  ...validWorkspaceData,\n  owner_email: \"jane.doe@example.com\", // New email to bypass email ownership check\n};\ntry {\n  // Create a new workspace with the same workspaceName but different email\n  await axios.post(`${BASE_URL}/createWorkspace`, duplicateWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Workspace Name is being Used.\"\n  );\n}",
              "err": {},
              "uuid": "6f538be6-63fe-4b2e-926a-5c51ea2a4599",
              "parentUUID": "9857f6ff-801b-4fed-ab28-d4ad96963f34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with a 500 error if data is missing",
              "fullTitle": "POST /createWorkspace should fail with a 500 error if data is missing",
              "timedOut": false,
              "duration": 1242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const incompleteData = {\n  firstName: \"Alice\",\n  lastName: \"Smith\",\n  owner_email: \"alice.smith@example.com\",\n};\ntry {\n  await axios.post(`${BASE_URL}/createWorkspace`, incompleteData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data)\n    .to.have.property(\"message\")\n    .that.includes(\"Internal Server Error\");\n}",
              "err": {},
              "uuid": "17b1e0ad-344f-486f-8882-76f4c09bc62f",
              "parentUUID": "9857f6ff-801b-4fed-ab28-d4ad96963f34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb4d99ae-86f9-48cf-b2f1-bfa51a446481",
            "6f538be6-63fe-4b2e-926a-5c51ea2a4599",
            "17b1e0ad-344f-486f-8882-76f4c09bc62f"
          ],
          "failures": [
            "c5cf5cc1-0fee-4a5c-ac3b-b291d3f7b96a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4465,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f9037211-de6d-400f-9720-4622edab0a71",
          "title": "POST /addTask",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new task successfully",
              "fullTitle": "POST /addTask should create a new task successfully",
              "timedOut": false,
              "duration": 800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${BASE_URL}/addTask`, validTaskData);\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"task Successfully Created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "1692159b-8a68-4061-8839-0d3d83ef6756",
              "parentUUID": "f9037211-de6d-400f-9720-4622edab0a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if required fields are missing",
              "fullTitle": "POST /addTask should return 400 if required fields are missing",
              "timedOut": false,
              "duration": 784,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const incompleteTaskData = {\n  title: \"Complete Project Report\",\n};\ntry {\n  const res = await axios.post(`${BASE_URL}/addTask`, incompleteTaskData);\n  expect(res.status).to.equal(400);\n  expect(res.data).to.have.property(\"message\", \"All fields are required\");\n} catch (error) {}",
              "err": {},
              "uuid": "568e8451-d9e4-442b-be50-e1eb16090d59",
              "parentUUID": "f9037211-de6d-400f-9720-4622edab0a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 in case of a server error",
              "fullTitle": "POST /addTask should return 500 in case of a server error",
              "timedOut": false,
              "duration": 786,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.post(`${BASE_URL}/addTask`, validTaskData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    `Internal Server Error ${error}`\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:131:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0c0a56ca-4d52-47bc-93f9-141798d48b79",
              "parentUUID": "f9037211-de6d-400f-9720-4622edab0a71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1692159b-8a68-4061-8839-0d3d83ef6756",
            "568e8451-d9e4-442b-be50-e1eb16090d59"
          ],
          "failures": [
            "0c0a56ca-4d52-47bc-93f9-141798d48b79"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2370,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8fbb345c-a405-4fbf-bed1-1f2073c1838c",
          "title": "POST /addProject",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully create a new project",
              "fullTitle": "POST /addProject should successfully create a new project",
              "timedOut": false,
              "duration": 787,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const projectData = {\n  title: \"New Project\",\n  workspaceName: \"Sweezyville\",\n  description: \"A new project for testing\",\n  priority: \"High\",\n  startDate: \"2024-11-01\",\n  dueDate: \"2024-12-01\",\n  selectedTeamMembers: [\"Sipho Mkhize\"],\n  status: \"to do\",\n};\ntry {\n  const response = await axios.post(`${BASE_URL}/addProject`, projectData);\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"project Successfully Created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "85926fdd-0434-4884-8c78-8ed55f7b2a47",
              "parentUUID": "8fbb345c-a405-4fbf-bed1-1f2073c1838c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if project creation fails",
              "fullTitle": "POST /addProject should return an error if project creation fails",
              "timedOut": false,
              "duration": 775,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidProjectData = [];\ntry {\n  const response = await axios.post(\n    `${BASE_URL}/addProject`,\n    invalidProjectData\n  );\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {},
              "uuid": "a5e7de55-8d7c-4910-aeb5-8ef1b688f654",
              "parentUUID": "8fbb345c-a405-4fbf-bed1-1f2073c1838c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85926fdd-0434-4884-8c78-8ed55f7b2a47",
            "a5e7de55-8d7c-4910-aeb5-8ef1b688f654"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1562,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}