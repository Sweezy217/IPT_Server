{
  "stats": {
    "suites": 5,
    "tests": 16,
    "passes": 9,
    "pending": 0,
    "failures": 7,
    "start": "2024-11-10T19:32:23.678Z",
    "end": "2024-11-10T19:32:25.555Z",
    "duration": 1877,
    "testsRegistered": 16,
    "passPercent": 56.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5acf830f-1ae1-47cd-b088-40579f64b6c6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9c7f347d-63f6-49d6-bfbd-d27fdfe0148e",
          "title": "GET /userWorkSpaces",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 400 if email query parameter is missing",
              "fullTitle": "GET /userWorkSpaces should return 400 if email query parameter is missing",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces`);\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data.message).to.equal(\n    \"Email query parameter is required\"\n  );\n}",
              "err": {},
              "uuid": "14789b37-f6a8-4154-8e16-9c94fc7f9de0",
              "parentUUID": "9c7f347d-63f6-49d6-bfbd-d27fdfe0148e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and list of workspaces if email has associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 200 and list of workspaces if email has associated workspaces",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(\n  `${URL}/userWorkSpaces?email=siphomkhize217@gmail.com`\n);\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property(\"message\").that.is.an(\"array\");\nresponse.data.message.forEach((workspace) => {\n  expect(workspace).to.have.property(\"workspaceName\");\n});",
              "err": {},
              "uuid": "19c6e7cb-977c-4ac2-b829-bf1d60409ab7",
              "parentUUID": "9c7f347d-63f6-49d6-bfbd-d27fdfe0148e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if email has no associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 404 if email has no associated workspaces",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces?email=no_workspace@example.com`);\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data.message).to.equal(\"No workspaces found\");\n}",
              "err": {},
              "uuid": "91b1ce88-3fee-4752-953b-206b50ebac6b",
              "parentUUID": "9c7f347d-63f6-49d6-bfbd-d27fdfe0148e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14789b37-f6a8-4154-8e16-9c94fc7f9de0",
            "19c6e7cb-977c-4ac2-b829-bf1d60409ab7",
            "91b1ce88-3fee-4752-953b-206b50ebac6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 232,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ffe4692a-3663-473b-bc08-ad9ffabfa8af",
          "title": "GET /users",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of users successfully",
              "fullTitle": "GET /users should retrieve a list of users successfully",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get(`${URL}/users`);\n  expect(response.status).to.equal(200);\n  expect(response.data).to.be.an(\"array\");\n  expect(response.data.length).to.be.greaterThan(0);\n  response.data.forEach((user) => {\n    expect(user).to.have.property(\"firstName\");\n    expect(user).to.have.property(\"lastName\");\n    expect(user).to.have.property(\"email\");\n  });\n} catch (error) {\n  throw new Error(`Expected status 200 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "9bb470c5-751c-43b7-b862-e3fadf1e196f",
              "parentUUID": "ffe4692a-3663-473b-bc08-ad9ffabfa8af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no users are found",
              "fullTitle": "GET /users should return 404 if no users are found",
              "timedOut": false,
              "duration": 100,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get(`${URL}/users`);\n  expect(response.status).to.equal(404);\n  expect(response.data).to.have.property(\"message\", \"No Users Found.\");\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"No Users Found.\"\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:65:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "43ef559f-3f04-4dec-af40-369d88ca888e",
              "parentUUID": "ffe4692a-3663-473b-bc08-ad9ffabfa8af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 in case of a server error",
              "fullTitle": "GET /users should return 500 in case of a server error",
              "timedOut": false,
              "duration": 75,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/users`);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:78:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f64f6e4f-2c26-4845-8731-22c144fce5f2",
              "parentUUID": "ffe4692a-3663-473b-bc08-ad9ffabfa8af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9bb470c5-751c-43b7-b862-e3fadf1e196f"
          ],
          "failures": [
            "43ef559f-3f04-4dec-af40-369d88ca888e",
            "f64f6e4f-2c26-4845-8731-22c144fce5f2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f89a581-d91c-42f7-9b39-3f49d02262e3",
          "title": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return tasks for the given email and workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return tasks for the given email and workspace",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${URL}/getTasks`, validRequestData);\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\"message\");\n  expect(response.data.message).to.be.an(\"array\");\n  expect(response.data.message.length).to.be.greaterThan(0);\n} catch (error) {\n  throw new Error(`Expected status 200 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "63c949d6-1d68-4771-b253-55d268e7afdf",
              "parentUUID": "9f89a581-d91c-42f7-9b39-3f49d02262e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no tasks are found for the given email and workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return 404 if no tasks are found for the given email and workspace",
              "timedOut": false,
              "duration": 75,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const invalidRequestData = {\n  email: \"non@gmail.com\",\n  workspaceName: \"Workspace\",\n};\ntry {\n  const response = await axios.post(`${URL}/getTasks`, invalidRequestData);\n  console.log(\"1234\", response);\n  expect(response.status).to.equal(404);\n  expect(response.data).to.have.property(\"message\", \"No tasks found\");\n} catch (error) {\n  throw new Error(`Expected status 404 but got ${error.response.status}`);\n}",
              "err": {
                "message": "Error: Expected status 404 but got 404",
                "estack": "Error: Expected status 404 but got 404\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:118:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9876822b-8b06-488f-bc88-f899fb2dfcb7",
              "parentUUID": "9f89a581-d91c-42f7-9b39-3f49d02262e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return 500 if there is a server error",
              "timedOut": false,
              "duration": 102,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.post(`${URL}/getTasks`, validRequestData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:127:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7cd67db9-aad9-47a3-810a-be547bef8b49",
              "parentUUID": "9f89a581-d91c-42f7-9b39-3f49d02262e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "63c949d6-1d68-4771-b253-55d268e7afdf"
          ],
          "failures": [
            "9876822b-8b06-488f-bc88-f899fb2dfcb7",
            "7cd67db9-aad9-47a3-810a-be547bef8b49"
          ],
          "pending": [],
          "skipped": [],
          "duration": 287,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c777740-fc38-42a0-8a14-074276ae2fe6",
          "title": "POST /createWorkspace",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new workspace and user successfully",
              "fullTitle": "POST /createWorkspace should create a new workspace and user successfully",
              "timedOut": false,
              "duration": 158,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(\n    `${BASE_URL}/createWorkspace`,\n    validWorkspaceData\n  );\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"Workspace and User successfully created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n  expect(response.data).to.have.property(\"workspaceId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {
                "message": "Error: Expected status 201 but got 400",
                "estack": "Error: Expected status 201 but got 400\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:30:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "97564217-6616-414a-9842-82e3b8d4b3bf",
              "parentUUID": "9c777740-fc38-42a0-8a14-074276ae2fe6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the email already owns a workspace",
              "fullTitle": "POST /createWorkspace should fail if the email already owns a workspace",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  // Assuming the email is already in use, send a request with the same owner_email\n  await axios.post(`${BASE_URL}/createWorkspace`, validWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Email already Owns a WorkSpace!!\"\n  );\n}",
              "err": {},
              "uuid": "3690df85-f2f3-4404-bc3f-d68b5f939b81",
              "parentUUID": "9c777740-fc38-42a0-8a14-074276ae2fe6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the workspace name is already taken",
              "fullTitle": "POST /createWorkspace should fail if the workspace name is already taken",
              "timedOut": false,
              "duration": 261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateWorkspaceData = {\n  ...validWorkspaceData,\n  owner_email: \"jane.doe@example.com\", // New email to bypass email ownership check\n};\ntry {\n  // Create a new workspace with the same workspaceName but different email\n  await axios.post(`${BASE_URL}/createWorkspace`, duplicateWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Workspace Name is being Used.\"\n  );\n}",
              "err": {},
              "uuid": "66b890ad-0e7a-4adc-b441-9a10885dbeda",
              "parentUUID": "9c777740-fc38-42a0-8a14-074276ae2fe6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with a 500 error if data is missing",
              "fullTitle": "POST /createWorkspace should fail with a 500 error if data is missing",
              "timedOut": false,
              "duration": 263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const incompleteData = {\n  firstName: \"Alice\",\n  lastName: \"Smith\",\n  owner_email: \"alice.smith@example.com\",\n}; // Missing workspaceName and password\ntry {\n  await axios.post(`${BASE_URL}/createWorkspace`, incompleteData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data)\n    .to.have.property(\"message\")\n    .that.includes(\"Internal Server Error\");\n}",
              "err": {},
              "uuid": "a4477b00-6f8b-48d1-9611-8902f6fc3c97",
              "parentUUID": "9c777740-fc38-42a0-8a14-074276ae2fe6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3690df85-f2f3-4404-bc3f-d68b5f939b81",
            "66b890ad-0e7a-4adc-b441-9a10885dbeda",
            "a4477b00-6f8b-48d1-9611-8902f6fc3c97"
          ],
          "failures": [
            "97564217-6616-414a-9842-82e3b8d4b3bf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 826,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8d4eaae9-85af-49c0-839e-9afd378747b0",
          "title": "POST /addTask",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new task successfully",
              "fullTitle": "POST /addTask should create a new task successfully",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${BASE_URL}/addTask`, validTaskData);\n  \n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\"message\", \"task Successfully Created\");\n  expect(response.data).to.have.property(\"userId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "ed609db6-29bd-4a2a-b722-2eb99592cf57",
              "parentUUID": "8d4eaae9-85af-49c0-839e-9afd378747b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if required fields are missing",
              "fullTitle": "POST /addTask should return 400 if required fields are missing",
              "timedOut": false,
              "duration": 74,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const incompleteTaskData = {\n  title: \"Complete Project Report\",\n};\ntry {\n  await axios.post(`${BASE_URL}/addTask`, incompleteTaskData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\"message\", \"All fields are required\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:120:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5515543e-c9d7-41ac-b932-09c4726b6962",
              "parentUUID": "8d4eaae9-85af-49c0-839e-9afd378747b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 in case of a server error",
              "fullTitle": "POST /addTask should return 500 in case of a server error",
              "timedOut": false,
              "duration": 86,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.post(`${BASE_URL}/addTask`, validTaskData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\"message\", `Internal Server Error ${error}`);\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:130:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c93d1ce3-35e5-47e3-945c-b49250b03da4",
              "parentUUID": "8d4eaae9-85af-49c0-839e-9afd378747b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed609db6-29bd-4a2a-b722-2eb99592cf57"
          ],
          "failures": [
            "5515543e-c9d7-41ac-b932-09c4726b6962",
            "c93d1ce3-35e5-47e3-945c-b49250b03da4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}