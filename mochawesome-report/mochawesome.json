{
  "stats": {
    "suites": 7,
    "tests": 21,
    "passes": 17,
    "pending": 0,
    "failures": 4,
    "start": "2024-11-10T20:14:23.845Z",
    "end": "2024-11-10T20:14:25.634Z",
    "duration": 1789,
    "testsRegistered": 21,
    "passPercent": 80.95238095238095,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ccedd4cd-58c9-4f94-a5af-d66a675bcbd0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "39d8c6f6-6e24-4ad6-b5a0-f3cf1d468437",
          "title": "GET /userWorkSpaces",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 400 if email query parameter is missing",
              "fullTitle": "GET /userWorkSpaces should return 400 if email query parameter is missing",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces`);\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data.message).to.equal(\n    \"Email query parameter is required\"\n  );\n}",
              "err": {},
              "uuid": "5d186daa-9386-44ce-b323-c20f7c378889",
              "parentUUID": "39d8c6f6-6e24-4ad6-b5a0-f3cf1d468437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and list of workspaces if email has associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 200 and list of workspaces if email has associated workspaces",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(\n  `${URL}/userWorkSpaces?email=siphomkhize217@gmail.com`\n);\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property(\"message\").that.is.an(\"array\");\nresponse.data.message.forEach((workspace) => {\n  expect(workspace).to.have.property(\"workspaceName\");\n});",
              "err": {},
              "uuid": "8a8e8a96-b5f9-467e-8c25-2d3d37a03667",
              "parentUUID": "39d8c6f6-6e24-4ad6-b5a0-f3cf1d468437",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if email has no associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 404 if email has no associated workspaces",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces?email=no_workspace@example.com`);\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data.message).to.equal(\"No workspaces found\");\n}",
              "err": {},
              "uuid": "39ba117a-f342-47aa-a918-12c220c21b3e",
              "parentUUID": "39d8c6f6-6e24-4ad6-b5a0-f3cf1d468437",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d186daa-9386-44ce-b323-c20f7c378889",
            "8a8e8a96-b5f9-467e-8c25-2d3d37a03667",
            "39ba117a-f342-47aa-a918-12c220c21b3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 206,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6db4fb5-41ec-4caf-bd38-ddbe9204834f",
          "title": "GET /users",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of users successfully",
              "fullTitle": "GET /users should retrieve a list of users successfully",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get(`${URL}/users`);\n  expect(response.status).to.equal(200);\n  expect(response.data).to.be.an(\"array\");\n  expect(response.data.length).to.be.greaterThan(0);\n  response.data.forEach((user) => {\n    expect(user).to.have.property(\"firstName\");\n    expect(user).to.have.property(\"lastName\");\n    expect(user).to.have.property(\"email\");\n  });\n} catch (error) {\n  throw new Error(`Expected status 200 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "8f5eec5b-d43d-494a-ab13-251d75ca3f14",
              "parentUUID": "a6db4fb5-41ec-4caf-bd38-ddbe9204834f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no users are found",
              "fullTitle": "GET /users should return 404 if no users are found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockResponse = {\n  status: 404,\n  data: { message: \"No Users Found.\" },\n};\n// Mock axios.get method\naxios.get = () => Promise.resolve(mockResponse);\ntry {\n  const response = await axios.get(`${URL}/users`);\n  expect(response.status).to.equal(404);\n  expect(response.data).to.have.property(\"message\", \"No Users Found.\");\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"No Users Found.\"\n  );\n}",
              "err": {},
              "uuid": "c5c6ecf4-fc2e-4313-bba0-6488782e2134",
              "parentUUID": "a6db4fb5-41ec-4caf-bd38-ddbe9204834f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 in case of a server error",
              "fullTitle": "GET /users should return 500 in case of a server error",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/users`);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:85:29)",
                "diff": null
              },
              "uuid": "a41076d0-ab97-4c56-963a-9a5fe9eb574b",
              "parentUUID": "a6db4fb5-41ec-4caf-bd38-ddbe9204834f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f5eec5b-d43d-494a-ab13-251d75ca3f14",
            "c5c6ecf4-fc2e-4313-bba0-6488782e2134"
          ],
          "failures": [
            "a41076d0-ab97-4c56-963a-9a5fe9eb574b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 62,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "55d870e3-9a41-4d5c-b2e8-b5fa78a4bec4",
          "title": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return tasks for the given email and workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return tasks for the given email and workspace",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${URL}/getTasks`, validRequestData);\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\"message\");\n  expect(response.data.message).to.be.an(\"array\");\n  expect(response.data.message.length).to.be.greaterThan(0);\n} catch (error) {\n  throw new Error(`Expected status 200 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "64154512-6afd-45f7-bee4-71e184dc04f0",
              "parentUUID": "55d870e3-9a41-4d5c-b2e8-b5fa78a4bec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no tasks are found for the given email and workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return 404 if no tasks are found for the given email and workspace",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidRequestData = {\n  email: \"non@gmail.com\",\n  workspaceName: \"Workspace\",\n};\ntry {\n  const response = await axios.post(`${URL}/getTasks`, invalidRequestData);\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data).to.have.property(\"message\", \"No tasks found\");\n} catch (error) {\n  console.log(\"err\", error);\n}",
              "err": {},
              "uuid": "71205fe6-484f-442c-a81f-c01dea792b53",
              "parentUUID": "55d870e3-9a41-4d5c-b2e8-b5fa78a4bec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getTasks should return 500 if there is a server error",
              "timedOut": false,
              "duration": 87,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.post(`${URL}/getTasks`, validRequestData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:133:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3c668fa2-579e-4338-b846-6d4b34e387c0",
              "parentUUID": "55d870e3-9a41-4d5c-b2e8-b5fa78a4bec4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64154512-6afd-45f7-bee4-71e184dc04f0",
            "71205fe6-484f-442c-a81f-c01dea792b53"
          ],
          "failures": [
            "3c668fa2-579e-4338-b846-6d4b34e387c0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 347,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9ddc158d-9c66-4024-9fae-91adddc7bb11",
          "title": "This is a post req but because it is getting data it is under get.mjs. POST /getProject",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve projects for a specific workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getProject should retrieve projects for a specific workspace",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  workspaceName: \"SamOrg\",\n};\ntry {\n  const response = await axios.post(`${URL}/getProject`, requestData);\n  \n  expect(response.status).to.equal(201);\n  expect(response.data.message).to.be.an(\"array\");\n  expect(response.data.message.length).to.be.greaterThan(0);\n  response.data.message.forEach((project) => {\n    expect(project).to.have.property(\"title\");\n    expect(project).to.have.property(\"workspaceName\");\n  });\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "99496a69-5e4f-4e84-88c4-1122d7187397",
              "parentUUID": "9ddc158d-9c66-4024-9fae-91adddc7bb11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no projects are found for the workspace",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getProject should return an empty array if no projects are found for the workspace",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  workspaceName: \"Samorgs\",\n};\ntry {\n  const response = await axios.post(`${URL}/getProject`, requestData);\n  \n  expect(response.status).to.equal(201);\n  expect(response.data.message).to.be.an(\"array\").that.is.empty;\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "b773d610-36a3-4ebf-8edb-64b892f384f3",
              "parentUUID": "9ddc158d-9c66-4024-9fae-91adddc7bb11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if fetching projects fails",
              "fullTitle": "This is a post req but because it is getting data it is under get.mjs. POST /getProject should return an error if fetching projects fails",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  workspaceName: {},\n};\ntry {\n  await axios.post(`${URL}/getProject`, requestData);\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\"message\", \"Internal Server Error\");\n}",
              "err": {},
              "uuid": "4122e71e-2f46-4282-b391-33fa1a43f349",
              "parentUUID": "9ddc158d-9c66-4024-9fae-91adddc7bb11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99496a69-5e4f-4e84-88c4-1122d7187397",
            "b773d610-36a3-4ebf-8edb-64b892f384f3",
            "4122e71e-2f46-4282-b391-33fa1a43f349"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ea1e59a3-0902-4c74-8c26-9ce16cd84ffd",
          "title": "POST /createWorkspace",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new workspace and user successfully",
              "fullTitle": "POST /createWorkspace should create a new workspace and user successfully",
              "timedOut": false,
              "duration": 137,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(\n    `${BASE_URL}/createWorkspace`,\n    validWorkspaceData\n  );\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"Workspace and User successfully created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n  expect(response.data).to.have.property(\"workspaceId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {
                "message": "Error: Expected status 201 but got 400",
                "estack": "Error: Expected status 201 but got 400\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:30:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c9ca6b5d-1cb0-4e5f-b4a2-5ff9fc6db5fa",
              "parentUUID": "ea1e59a3-0902-4c74-8c26-9ce16cd84ffd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the email already owns a workspace",
              "fullTitle": "POST /createWorkspace should fail if the email already owns a workspace",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  // Assuming the email is already in use, send a request with the same owner_email\n  await axios.post(`${BASE_URL}/createWorkspace`, validWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Email already Owns a WorkSpace!!\"\n  );\n}",
              "err": {},
              "uuid": "85151d72-9da8-4482-a165-b07bb2022114",
              "parentUUID": "ea1e59a3-0902-4c74-8c26-9ce16cd84ffd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the workspace name is already taken",
              "fullTitle": "POST /createWorkspace should fail if the workspace name is already taken",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateWorkspaceData = {\n  ...validWorkspaceData,\n  owner_email: \"jane.doe@example.com\", // New email to bypass email ownership check\n};\ntry {\n  // Create a new workspace with the same workspaceName but different email\n  await axios.post(`${BASE_URL}/createWorkspace`, duplicateWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Workspace Name is being Used.\"\n  );\n}",
              "err": {},
              "uuid": "4fa6c31f-1d0e-41e0-8963-c3c253128b18",
              "parentUUID": "ea1e59a3-0902-4c74-8c26-9ce16cd84ffd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with a 500 error if data is missing",
              "fullTitle": "POST /createWorkspace should fail with a 500 error if data is missing",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const incompleteData = {\n  firstName: \"Alice\",\n  lastName: \"Smith\",\n  owner_email: \"alice.smith@example.com\",\n};\ntry {\n  await axios.post(`${BASE_URL}/createWorkspace`, incompleteData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data)\n    .to.have.property(\"message\")\n    .that.includes(\"Internal Server Error\");\n}",
              "err": {},
              "uuid": "925858aa-a17a-4248-beb2-80da78fb6f20",
              "parentUUID": "ea1e59a3-0902-4c74-8c26-9ce16cd84ffd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85151d72-9da8-4482-a165-b07bb2022114",
            "4fa6c31f-1d0e-41e0-8963-c3c253128b18",
            "925858aa-a17a-4248-beb2-80da78fb6f20"
          ],
          "failures": [
            "c9ca6b5d-1cb0-4e5f-b4a2-5ff9fc6db5fa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 658,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f27b24d7-780b-4766-a437-53ec8bb3111e",
          "title": "POST /addTask",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new task successfully",
              "fullTitle": "POST /addTask should create a new task successfully",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${BASE_URL}/addTask`, validTaskData);\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"task Successfully Created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "275ee36e-36f4-4619-a7da-12ecedbfddda",
              "parentUUID": "f27b24d7-780b-4766-a437-53ec8bb3111e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if required fields are missing",
              "fullTitle": "POST /addTask should return 400 if required fields are missing",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const incompleteTaskData = {\n  title: \"Complete Project Report\",\n};\ntry {\n  const res = await axios.post(`${BASE_URL}/addTask`, incompleteTaskData);\n  expect(res.status).to.equal(400);\n  expect(res.data).to.have.property(\"message\", \"All fields are required\");\n} catch (error) {}",
              "err": {},
              "uuid": "f1751b8b-37cf-4f0b-b963-b3d71e5ff387",
              "parentUUID": "f27b24d7-780b-4766-a437-53ec8bb3111e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 in case of a server error",
              "fullTitle": "POST /addTask should return 500 in case of a server error",
              "timedOut": false,
              "duration": 64,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.post(`${BASE_URL}/addTask`, validTaskData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    `Internal Server Error ${error}`\n  );\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:131:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "788453ef-919b-493e-9c40-694c342cb0f2",
              "parentUUID": "f27b24d7-780b-4766-a437-53ec8bb3111e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "275ee36e-36f4-4619-a7da-12ecedbfddda",
            "f1751b8b-37cf-4f0b-b963-b3d71e5ff387"
          ],
          "failures": [
            "788453ef-919b-493e-9c40-694c342cb0f2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "761b941a-cef3-441a-bfa0-f6e70d88fc1b",
          "title": "POST /addProject",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully create a new project",
              "fullTitle": "POST /addProject should successfully create a new project",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const projectData = {\n  title: \"New Project\",\n  workspaceName: \"Sweezyville\",\n  description: \"A new project for testing\",\n  priority: \"High\",\n  startDate: \"2024-11-01\",\n  dueDate: \"2024-12-01\",\n  selectedTeamMembers: [\"Sipho Mkhize\"],\n  status: \"to do\",\n};\ntry {\n  const response = await axios.post(`${BASE_URL}/addProject`, projectData);\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"project Successfully Created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {},
              "uuid": "f70dbca5-e5ef-458d-9df6-841defc54e97",
              "parentUUID": "761b941a-cef3-441a-bfa0-f6e70d88fc1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if project creation fails",
              "fullTitle": "POST /addProject should return an error if project creation fails",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidProjectData = [];\ntry {\n  const response = await axios.post(\n    `${BASE_URL}/addProject`,\n    invalidProjectData\n  );\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Internal Server Error\"\n  );\n}",
              "err": {},
              "uuid": "f6571131-0d98-459c-96f8-3de78aa4c48f",
              "parentUUID": "761b941a-cef3-441a-bfa0-f6e70d88fc1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f70dbca5-e5ef-458d-9df6-841defc54e97",
            "f6571131-0d98-459c-96f8-3de78aa4c48f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}