{
  "stats": {
    "suites": 3,
    "tests": 10,
    "passes": 6,
    "pending": 0,
    "failures": 4,
    "start": "2024-11-10T18:16:34.771Z",
    "end": "2024-11-10T18:16:35.658Z",
    "duration": 887,
    "testsRegistered": 10,
    "passPercent": 60,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4d9a2890-0c10-47e3-8aa1-ba72cdccd7c9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "64ea3515-4ca5-4471-8d62-4751d1bd3993",
          "title": "GET /userWorkSpaces",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 400 if email query parameter is missing",
              "fullTitle": "GET /userWorkSpaces should return 400 if email query parameter is missing",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces`);\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data.message).to.equal(\n    \"Email query parameter is required\"\n  );\n}",
              "err": {},
              "uuid": "f8447822-9078-4135-b4d8-6224248dc7e6",
              "parentUUID": "64ea3515-4ca5-4471-8d62-4751d1bd3993",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and list of workspaces if email has associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 200 and list of workspaces if email has associated workspaces",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(\n  `${URL}/userWorkSpaces?email=siphomkhize217@gmail.com`\n);\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property(\"message\").that.is.an(\"array\");\nresponse.data.message.forEach((workspace) => {\n  expect(workspace).to.have.property(\"workspaceName\");\n});",
              "err": {},
              "uuid": "16dde56e-1ed7-4749-a8dd-5d9d91f542b2",
              "parentUUID": "64ea3515-4ca5-4471-8d62-4751d1bd3993",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if email has no associated workspaces",
              "fullTitle": "GET /userWorkSpaces should return 404 if email has no associated workspaces",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await axios.get(`${URL}/userWorkSpaces?email=no_workspace@example.com`);\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data.message).to.equal(\"No workspaces found\");\n}",
              "err": {},
              "uuid": "25c73412-07c5-4680-82b4-f9be32e04c09",
              "parentUUID": "64ea3515-4ca5-4471-8d62-4751d1bd3993",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8447822-9078-4135-b4d8-6224248dc7e6",
            "16dde56e-1ed7-4749-a8dd-5d9d91f542b2",
            "25c73412-07c5-4680-82b4-f9be32e04c09"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 201,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "038f87d1-b3d9-4093-b467-ecca9302c19d",
          "title": "GET /api/users",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\get.mjs",
          "file": "\\test\\get.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of users successfully",
              "fullTitle": "GET /api/users should retrieve a list of users successfully",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get(`${URL}/api/users`);\n  console.log(\"responseresponse\", response);\n  \n  expect(response.status).to.equal(200);\n  expect(response.data).to.be.an(\"array\");\n  expect(response.data.length).to.be.greaterThan(0);\n  response.data.forEach((user) => {\n    expect(user).to.have.property(\"firstName\");\n    expect(user).to.have.property(\"lastName\");\n    expect(user).to.have.property(\"email\");\n  });\n} catch (error) {\n  throw new Error(`Expected status 200 but got ${error.response.status}`);\n}",
              "err": {
                "message": "Error: Expected status 200 but got 404",
                "estack": "Error: Expected status 200 but got 404\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:58:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3b88e591-652b-4fdf-8c66-bd5a89a99c56",
              "parentUUID": "038f87d1-b3d9-4093-b467-ecca9302c19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no users are found",
              "fullTitle": "GET /api/users should return 404 if no users are found",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  // Simulate no users in the collection (requires test database setup)\n  const response = await axios.get(`${URL}/api/users`);\n  expect(response.status).to.equal(404);\n  expect(response.data).to.have.property(\"message\", \"No Users Found.\");\n} catch (error) {\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data).to.have.property(\"message\", \"No Users Found.\");\n}",
              "err": {
                "message": "AssertionError: expected '<!DOCTYPE html>\\n<html lang=\"en\">\\n<h…' to have property 'message'",
                "estack": "AssertionError: expected '<!DOCTYPE html>\\n<html lang=\"en\">\\n<h…' to have property 'message'\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:70:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "02f6f636-011a-4f09-9869-1784ff2ed835",
              "parentUUID": "038f87d1-b3d9-4093-b467-ecca9302c19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 in case of a server error",
              "fullTitle": "GET /api/users should return 500 in case of a server error",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  // Simulate a server error (requires mock or modification for test purposes)\n  await axios.get(`${URL}/api/users`);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data).to.have.property(\"message\", \"Internal Server Error\");\n}",
              "err": {
                "message": "AssertionError: expected 404 to equal 500",
                "estack": "AssertionError: expected 404 to equal 500\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/get.mjs:80:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 404\n+ 500\n"
              },
              "uuid": "fa31675e-e2d0-4d51-b7c7-5ef6fe1d3e4f",
              "parentUUID": "038f87d1-b3d9-4093-b467-ecca9302c19d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3b88e591-652b-4fdf-8c66-bd5a89a99c56",
            "02f6f636-011a-4f09-9869-1784ff2ed835",
            "fa31675e-e2d0-4d51-b7c7-5ef6fe1d3e4f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3b889987-7a2e-40a8-8926-f5210cae726d",
          "title": "POST /createWorkspace",
          "fullFile": "C:\\Users\\User\\OneDrive\\Documents\\Work\\IPT_Server\\test\\post.mjs",
          "file": "\\test\\post.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"POST /createWorkspace\"",
              "fullTitle": "POST /createWorkspace \"after all\" hook in \"POST /createWorkspace\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clean up the created test data, such as by deleting users or workspaces if needed",
              "err": {},
              "uuid": "e6ea8282-220f-4b76-8a00-9cb201f84876",
              "parentUUID": "3b889987-7a2e-40a8-8926-f5210cae726d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new workspace and user successfully",
              "fullTitle": "POST /createWorkspace should create a new workspace and user successfully",
              "timedOut": false,
              "duration": 146,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(\n    `${BASE_URL}/createWorkspace`,\n    validWorkspaceData\n  );\n  expect(response.status).to.equal(201);\n  expect(response.data).to.have.property(\n    \"message\",\n    \"Workspace and User successfully created\"\n  );\n  expect(response.data).to.have.property(\"userId\");\n  expect(response.data).to.have.property(\"workspaceId\");\n} catch (error) {\n  throw new Error(`Expected status 201 but got ${error.response.status}`);\n}",
              "err": {
                "message": "Error: Expected status 201 but got 400",
                "estack": "Error: Expected status 201 but got 400\n    at Context.<anonymous> (file:///C:/Users/User/OneDrive/Documents/Work/IPT_Server/test/post.mjs:30:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5512f97e-cd17-44f8-93a6-c13a078dbbed",
              "parentUUID": "3b889987-7a2e-40a8-8926-f5210cae726d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the email already owns a workspace",
              "fullTitle": "POST /createWorkspace should fail if the email already owns a workspace",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  // Assuming the email is already in use, send a request with the same owner_email\n  await axios.post(`${BASE_URL}/createWorkspace`, validWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Email already Owns a WorkSpace!!\"\n  );\n}",
              "err": {},
              "uuid": "ea739e37-112a-4256-bab4-353390af5aa1",
              "parentUUID": "3b889987-7a2e-40a8-8926-f5210cae726d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if the workspace name is already taken",
              "fullTitle": "POST /createWorkspace should fail if the workspace name is already taken",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicateWorkspaceData = {\n  ...validWorkspaceData,\n  owner_email: \"jane.doe@example.com\", // New email to bypass email ownership check\n};\ntry {\n  // Create a new workspace with the same workspaceName but different email\n  await axios.post(`${BASE_URL}/createWorkspace`, duplicateWorkspaceData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(400);\n  expect(error.response.data).to.have.property(\n    \"message\",\n    \"Workspace Name is being Used.\"\n  );\n}",
              "err": {},
              "uuid": "586d1920-667a-4e3d-8348-b8e594857322",
              "parentUUID": "3b889987-7a2e-40a8-8926-f5210cae726d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with a 500 error if data is missing",
              "fullTitle": "POST /createWorkspace should fail with a 500 error if data is missing",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const incompleteData = {\n  firstName: \"Alice\",\n  lastName: \"Smith\",\n  owner_email: \"alice.smith@example.com\",\n}; // Missing workspaceName and password\ntry {\n  await axios.post(`${BASE_URL}/createWorkspace`, incompleteData);\n  throw new Error(\"Expected error but request succeeded\");\n} catch (error) {\n  expect(error.response.status).to.equal(500);\n  expect(error.response.data)\n    .to.have.property(\"message\")\n    .that.includes(\"Internal Server Error\");\n}",
              "err": {},
              "uuid": "b75c95b5-8907-4786-8c6f-81d6d9fd617a",
              "parentUUID": "3b889987-7a2e-40a8-8926-f5210cae726d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea739e37-112a-4256-bab4-353390af5aa1",
            "586d1920-667a-4e3d-8348-b8e594857322",
            "b75c95b5-8907-4786-8c6f-81d6d9fd617a"
          ],
          "failures": [
            "5512f97e-cd17-44f8-93a6-c13a078dbbed"
          ],
          "pending": [],
          "skipped": [],
          "duration": 640,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}